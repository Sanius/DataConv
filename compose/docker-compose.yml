version: "3"

volumes:
    ckan_data:
    postgresql_data:
    solr_data:
    mysql_data:
    mongo_data:
    postgresql_airflow_data:

networks:
    frontend:
    backend:

services:
    ckan:
        container_name: ckan
        build:
            context: .
            dockerfile: ckan/Dockerfile
            args:
                - PYTHON_VERSION=${PYTHON_VERSION}
                - CKAN_PLUGINS=${CKAN_PLUGINS}
                - CKAN_SITE_URL=${CKAN_SITE_URL}
        networks:
            - frontend
            - backend
        depends_on:
            - postgresql_db
            - mysql
            - mongo
            - postgresql_airflow_db
        ports:
            - "${CKAN_PORT}:5000"
            - "${AIRFLOW_PORT}:8080"
        environment:
            - CKAN_SQLALCHEMY_URL=postgresql://${POSTGRESQL_USER}:${POSTGRESQL_PASSWORD}@postgresql_db/${POSTGRESQL_DB}
            - CKAN_DATASTORE_WRITE_URL=postgresql://${POSTGRESQL_USER}:${POSTGRESQL_PASSWORD}@postgresql_db/${DATASTORE_DB}
            - CKAN_DATASTORE_READ_URL=postgresql://${DATASTORE_READONLY_USER}:${DATASTORE_READONLY_PASSWORD}@postgresql_db/${DATASTORE_DB}
            - CKAN_SOLR_URL=${SOLR_URL}
            - CKAN_REDIS_URL=${REDIS_URL}
            - CKAN_MAX_UPLOAD_SIZE_MB=${CKAN_MAX_UPLOAD_SIZE_MB}
            - POSTGRES_PASSWORD=${POSTGRESQL_PASSWORD}
            - DS_RO_PASS=${DATASTORE_READONLY_PASSWORD}
            - PYTHON_VERSION=${PYTHON_VERSION}
        volumes:
            - ckan_data:/srv/app/data/
            - ./airflow:/srv/app/airflow
            - ./dags/:/srv/app/airflow/dags/
            - ./dagbags/:/srv/app/dagbags/
            - ./scripts/airflow-entrypoint.sh:/srv/app/airflow-entrypoint.sh
            - ./scripts/all.sh:/srv/app/all.sh
        links:
            - postgresql_db:postgresql_db
            - mysql:mysql
            - mongo:mongo
            - postgresql_airflow_db:postgresql_airflow_db
        entrypoint:
            - /srv/app/all.sh

    datapusher:
        container_name: datapusher
        image: keitaro/ckan-datapusher:0.0.17
        networks:
            - frontend
            - backend
        ports:
            - ${DATAPUSHER_PORT}:8000
        environment:
            - DATAPUSHER_MAX_CONTENT_LENGTH=${DATAPUSHER_MAX_CONTENT_LENGTH}
            - DATAPUSHER_CHUNK_SIZE=${DATAPUSHER_CHUNK_SIZE}
            - DATAPUSHER_CHUNK_INSERT_ROWS=${DATAPUSHER_CHUNK_INSERT_ROWS}
            - DATAPUSHER_DOWNLOAD_TIMEOUT=${DATAPUSHER_DOWNLOAD_TIMEOUT}
            - DATAPUSHER_SSL_VERIFY=${DATAPUSHER_SSL_VERIFY}
            - DATAPUSHER_REWRITE_RESOURCES=${DATAPUSHER_REWRITE_RESOURCES}
            - DATAPUSHER_REWRITE_URL=${DATAPUSHER_REWRITE_URL}

    postgresql_db:
        container_name: postgresql_db
        build:
            context: .
            dockerfile: postgresql/Dockerfile
            args:
                - POSTGRES_DB=${POSTGRESQL_DB}
                - POSTGRES_USER=${POSTGRESQL_USER}
                - POSTGRES_PASSWORD=${POSTGRESQL_PASSWORD}
                - DS_DB=${DATASTORE_DB}
                - DS_RO_USER=${DATASTORE_READONLY_USER}
                - DS_RO_PASS=${DATASTORE_READONLY_PASSWORD}
        networks:
            - backend
        environment:
            - POSTGRES_DB=${POSTGRESQL_DB}
            - POSTGRES_USER=${POSTGRESQL_USER}
            - POSTGRES_PASSWORD=${POSTGRESQL_PASSWORD}
            - DS_DB=${DATASTORE_DB}
            - DS_RO_USER=${DATASTORE_READONLY_USER}
            - DS_RO_PASS=${DATASTORE_READONLY_PASSWORD}
        volumes:
            - postgresql_data:/var/lib/postgresql/data
        ports:
            - ${POSTGRESQL_PORT}:5432
        healthcheck:
            test: ["CMD", "pg_isready", "-U", "ckan"]

    postgresql_airflow_db:
        container_name: postgresql_airflow_db
        image: postgres:${POSTGRESQL_VERSION}
        environment:
            - POSTGRES_USER=${POSTGRESQL_AIRFLOW_USER}
            - POSTGRES_PASSWORD=${POSTGRESQL_AIRFLOW_PASSWORD}
            - POSTGRES_DB=${POSTGRESQL_AIRFLOW_DB}
        volumes:
            - postgresql_airflow_data:/var/lib/postgresql/data
        healthcheck:
            test: ["CMD", "pg_isready", "-U", "airflow"]
            interval: 5s
            retries: 5
        ports:
            - ${POSTGRESQL_AIRFLOW_PORT}:5432
        networks:
            - backend

    solr:
        container_name: solr
        build:
            context: .
            dockerfile: solr/Dockerfile
            args:
                - SOLR_CORE=${SOLR_CORE}
                - SOLR_USER=${SOLR_USER}
                - SOLR_VERSION=${SOLR_VERSION}
                - CKAN_VERSION=${CKAN_VERSION}
        networks:
            - backend
        volumes:
            - solr_data:/opt/solr/server/solr/ckan/data

    redis:
        container_name: redis
        image: redis:${REDIS_VERSION}
        ports:
            - ${REDIS_PORT}:6379
        healthcheck:
            test: ["CMD", "redis-cli", "ping"]
            interval: 5s
            timeout: 30s
            retries: 50
        networks:
            - backend
        restart: always

    mysql:
        container_name: mysql
        image: mysql:${MYSQL_VERSION}
        command: --default-authentication-plugin=mysql_native_password
        environment:
            - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
            - MYSQL_USER=${MYSQL_USER}
            - MYSQL_PASSWORD=${MYSQL_PASSWORD}
        volumes:
            - mysql_data:/var/lib/mysql
        networks:
            - backend
        cap_add:
            - SYS_NICE
        security_opt:
            - seccomp:unconfined

    mongo:
        container_name: mongo
        image: mongo:${MONGO_VERSION}
        environment:
            - MONGO_INITDB_ROOT_USERNAME=${MONGO_INITDB_ROOT_USERNAME}
            - MONGO_INITDB_ROOT_PASSWORD=${MONGO_INITDB_ROOT_PASSWORD}
        volumes:
            - mongo_data:/data/db
        networks:
            - backend

    pgadmin:
        container_name: pgadmin4
        image: dpage/pgadmin4
        restart: always
        environment:
            - PGADMIN_DEFAULT_EMAIL=${PGADMIN_DEFAULT_EMAIL}
            - PGADMIN_DEFAULT_PASSWORD=${PGADMIN_DEFAULT_PASSWORD}
        ports:
            - ${PGADMIN_PORT}:80
        networks:
            - backend
